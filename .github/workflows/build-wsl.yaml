name: Build WSL
on:
  workflow_dispatch:
    inputs:
      wslID:
        description: 'Release name to use for the bundle'
        required: true
        default: 'UbuntuPreview'
      rootfses:
        description: 'Ubuntu WSL rootfs urls, separated by a colon. Direct set of "tar.gz::arch" if arch is not in the filename'
        required: true
        default: ''
      rootfseschecksum:
        description: 'Should download a SHA256SUMS file to check the rootfs'
        required: true
        default: 'yes'
      upload:
        description: 'Should we upload the appxbundle to the store'
        required: true
        default: 'yes'
  schedule:
    - cron: '0 10 * * *'

env:
  goversion: '1.16'

jobs:
  build-matrix:
    name: Build Matrix for WSLIDs to run on with rootfses, which can be manually supplied or automatically.
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.build-matrix-release.outputs.matrix }}
    steps:
      - name: Install dependencies
        run: |
          sudo DEBIAN_FRONTEND=noninteractive apt update
          sudo DEBIAN_FRONTEND=noninteractive apt install -y jq
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: ${{ env.goversion }}
      - name: Build Matrix for WSLIDs to run on with rootfses, which can be manually supplied or automatically
        id: build-matrix-release
        run: |
          set -eu
          # Manual build
          if [ ${{ github.event_name }} = 'workflow_dispatch' ]; then
            wslID="${{ github.event.inputs.wslID }}"
            if [ -z "${wslID}" ]; then
              wslID="UbuntuPreview"
            fi

            builds="$(cat <<-EOF|jq -c
              {"include":
                [
                  {
                    "WslID": "${wslID}",
                    "Rootfses": "${{ github.event.inputs.rootfses }}",
                    "RootfsesChecksum": "${{ github.event.inputs.rootfseschecksum }}",
                    "Upload": "${{ github.event.inputs.upload }}"
                  }
                ]
              }
          EOF
            )"
          else
            wsl-builder/lp-distro-info > /tmp/all-releases.csv
            cd ./wsl-builder/prepare-build
            go build .
            builds_config="$(./prepare-build build-github-matrix /tmp/all-releases.csv)"
            builds="{\"include\":${builds_config}}"
          fi

          echo "${builds}"
          echo "::set-output name=matrix::${builds}"

  build-wsl:
    name: Build WSL appxbundle for a given release
    runs-on: windows-latest
    needs: build-matrix
    strategy:
      matrix: ${{fromJson(needs.build-matrix.outputs.matrix)}}
      fail-fast: false
    env:
      buildInfoPath: 'wiki/build-info'
    steps:
      - uses: actions/checkout@v2
      - name: Checkout build-info
        uses: actions/checkout@v2
        with:
          path: 'wiki/'
          repository: ubuntu/wsl.wiki
      - uses: actions/setup-go@v2
        with:
          go-version: ${{ env.goversion }}
      - name: Prepare project metadata, assets and download rootfses
        shell: bash
        run: |
          set -eu
          # Download rootfses, checksum and place them at the correct place
          # TODO: what if we changed only assets?
          cd wsl-builder/prepare-build
          go build .
          cd ../../
          extraArgs=""
          if [ ${{ matrix.Upload }} != "yes" ]; then
              extraArgs="--build-id 9999"
          fi
          if [ ${{ matrix.RootfsesChecksum }} != "yes" ]; then
            extraArgs="${extraArgs} --no-checksum"
          fi
          archsBundle="$(./wsl-builder/prepare-build/prepare-build prepare ${{ env.buildInfoPath }}/${{ matrix.WslID }}-buildid.md ${{ matrix.WslID }} ${{ matrix.Rootfses }} ${extraArgs})"
          echo "AppxBundlePlatforms=${archsBundle}" >> $GITHUB_ENV

          # Always StoreUpload mode to get appxupload file
          buildMode="StoreUpload"
          echo "UapAppxPackageBuildMode=${buildMode}" >> $GITHUB_ENV
      - name: Setup MSBuild (PATH)
        uses: microsoft/setup-msbuild@v1.0.2
      - name: Install certificate
        shell: powershell
        run: |
          New-Item -ItemType directory -Path certificate
          Set-Content -Path certificate\certificate.txt -Value '${{ secrets.CERTIFICATE }}'
          certutil -decode certificate\certificate.txt certificate\certificate.pfx

          $pwd = ConvertTo-SecureString  '${{ secrets.CERTIFICATE_PASSWORD }}' -AsPlainText -Force
          Import-PfxCertificate -Password $pwd -CertStoreLocation Cert:LocalMachine\Trust -FilePath certificate\certificate.pfx
          Import-PfxCertificate -Password $pwd -CertStoreLocation Cert:CurrentUser\My -FilePath certificate\certificate.pfx
      - name: Build Bundle
        run:  msbuild .\DistroLauncher.sln /t:Build /m /nr:false /p:Configuration=Release /p:AppxBundle=Always /p:AppxBundlePlatforms="${{ env.AppxBundlePlatforms }}" /p:UapAppxPackageBuildMode=${{ env.UapAppxPackageBuildMode }} -verbosity:normal
      #- name: Allow downloading sideload appxbundle
      #  uses: actions/upload-artifact@v2
      #  with:
      #    name: sideload-${{ matrix.WslID }}
      #    path: |
      #      ./AppPackages/Ubuntu/Ubuntu_*/*
      #    retention-days: 7
      #- name: Allow downloading store appxupload
      #  uses: actions/upload-artifact@v2
      #  with:
      #    name: store-${{ matrix.WslID }}
      #    path: |
      #      ./AppPackages/Ubuntu/Ubuntu_*.appxupload
      #    retention-days: 7
      - name: Check if we need to upload new build
        id: detect-upload-to-store
        if: ${{ matrix.Upload == 'yes' }}
        shell:  bash
        run: |
          set -eu

          echo "::set-output name=needs-upload::false"

          # Store md5sum of rootfs and launchers
          fingerprint_file="${{ env.buildInfoPath }}/${{ matrix.WslID }}-fingerprint.md"
          md5sum */install.tar.gz */Release/launcher.exe */Release/DistroLauncher-Appx/*/launcher.exe|sort > ${fingerprint_file}
          git add ${fingerprint_file}

          # If build-id is 0, we donâ€™t want to submit it to the store as first submission is manual.
          # We let the other steps and jobs happening to save artifacts (build-id, fingerprints) of the first build
          build_id=$(cat "${{ env.buildInfoPath }}/${{ matrix.WslID }}-buildid.md")
          hasChanges="$(git diff --staged ${fingerprint_file})"
          if [ -z "${hasChanges}" -o -z "${build_id}" -o "${build_id}" = "0" ]; then
            exit 0
          fi

          echo "::set-output name=needs-upload:::true"

          echo "Uploading new version: some files have changed:"
          echo "${hasChanges}"

      - name: Install Store Broker
        #if: ${{ steps.detect-upload-to-store.outputs.needs-upload == 'true' }}
        shell: powershell
        run: |
          Install-Module -Name StoreBroker -AcceptLicense -Force -Scope CurrentUser -Verbose
      - name: Submit to Microsoft Store
        #if: ${{ steps.detect-upload-to-store.outputs.needs-upload == 'true' }}
        shell: powershell
        run: |
          # Authenticate against the store
          New-Item -ItemType directory -Path store
          Set-Content -Path store\clientsecret.txt -Value '${{ secrets.MSSTORE_CLIENT_SECRET }}'

          $clientSecret = Get-Content -Path store\clientsecret.txt | ConvertTo-SecureString
          $cred = New-Object System.Management.Automation.PSCredential '${{ secrets.AZUREAD_APPID }}', $clientSecret
          Set-StoreBrokerAuthentication -TenantId '${{ secrets.AZUREAD_TENANTID }}' -Credential $cred

          # Get store app ID for WslID
          $appid = (Get-Applications -GetAll | Where-Object PackageIdentityName -like '*${{ matrix.WslID }}').id
          If($appid -eq "") {
            echo "No app found for WslID: ${{ matrix.WslID }}"
            exit 1
          }

          # We want to publish UbuntuPreview automatically
          If(${{ matrix.WslID }} -eq "UbuntuPreview") {
            ((Get-Content -path meta\SBConfig.json -Raw) -replace 'Private','Public') | Set-Content -Path meta\SBConfig.json
          }

          # Prepare and submit to the Store
          cd store\
          New-SubmissionPackage -ConfigPath ..\meta\SBConfig.json
          Update-ApplicationSubmission -AppId $appid -SubmissionDataPath "out\appstore-submission.json" -PackagePath "out\appstore-submission.zip" -Force -Autocommit -ReplacePackages -UpdateListings -UpdatePublishModeAndVisibility -UpdatePricingAndAvailability -UpdateAppProperties -UpdateGamingOptions -UpdateTrailers -UpdateNotesForCertification



      - name: Upload build artifacts
        if: ${{ matrix.Upload == 'yes' }}
        uses: actions/upload-artifact@v2
        with:
          name: build-artifacts-${{ matrix.WslID }}
          path: ${{ env.buildInfoPath }}/${{ matrix.WslID }}-*


  update-build-artifacts:
    name: Store updated build artifacts in wiki for reuse in future workflow runs
    runs-on: ubuntu-latest
    if: always()
    needs: build-wsl
    env:
      artifactsPath: '/tmp/artifacts'
    steps:
      - name: Checkout wiki
        if: ${{ github.event.inputs.upload == 'yes' }}
        uses: actions/checkout@v2
        with:
          repository: ubuntu/wsl.wiki
      - name: Download artifacts from all previous matrix runs
        if: ${{ github.event.inputs.upload == 'yes' }}
        uses: actions/download-artifact@v2
        with:
          path: ${{ env.artifactsPath }}
      - name: Copy modified artifacts to base wiki
        if: ${{ github.event.inputs.upload == 'yes' }}
        run: |
          set -eu
          ls -lR ${{ env.artifactsPath }}
          mkdir -p build-info/
          cp -a ${{ env.artifactsPath }}/build-artifacts-*/*.md build-info/
      - name: Sync wiki to repository documentation
        if: ${{ github.event.inputs.upload == 'yes' }}
        run: |
          set -eux
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add .
          git commit -m "Auto-update build info"
          git push origin master
