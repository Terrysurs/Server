name: Build WSL
on:
  workflow_dispatch:
    inputs:
      wslID:
        description: 'Release name to use for the bundle'
        required: true
        default: 'Ubuntu-Preview'
      rootfses:
        description: 'Ubuntu WSL rootfs urls, separated by a colon. Direct set of "tar.gz::arch" if arch is not in the filename'
        required: true
        default: ''
  schedule:
    - cron: '0 10 * * *'

env:
  goversion: '1.16'

jobs:
  build-matrix:
    name: Build Matrix for WSLIDs to run on with rootfses, which can be manually supplied or automatically.
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.build-matrix-release.outputs.matrix }}
    steps:
      - name: Install dependencies
        run: |
          sudo DEBIAN_FRONTEND=noninteractive apt update
          sudo DEBIAN_FRONTEND=noninteractive apt install -y jq
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: ${{ env.goversion }}
      - name: Build Matrix for WSLIDs to run on with rootfses, which can be manually supplied or automatically
        id: build-matrix-release
        run: |
          set -eu
          # Manual build
          if [ ${{ github.event_name }} = 'workflow_dispatch' ]; then
            wslID="${{ github.event.inputs.wslID }}"
            if [ -z "${wslID}" ]; then
              wslID="Ubuntu-Preview"
            fi

            builds="$(cat <<-EOF|jq -c
              {"include":
                [
                  {
                    "WslID": "${wslID}",
                    "Rootfses": "${{ github.event.inputs.rootfses }}",
                    "Upload": "no"
                  }
                ]
              }
          EOF
            )"
          else
            wsl-builder/lp-distro-info > /tmp/all-releases.csv
            cd ./wsl-builder/prepare-build
            go build .
            builds_config="$(./prepare-build build-github-matrix /tmp/all-releases.csv)"
            builds="{\"include\":${builds_config}}"
          fi

          echo "${builds}"
          echo "::set-output name=matrix::${builds}"

  build-wsl:
    name: Build WSL appxbundle for a given release
    runs-on: windows-latest
    needs: build-matrix
    strategy:
      matrix: ${{fromJson(needs.build-matrix.outputs.matrix)}}
    env:
      artifactsPath: 'build-artefacts/'
    steps:
      - name: Download build artefacts
        if: ${{  matrix.Upload == 'yes' }}
        uses: actions/download-artifact@v2
        with:
          name: build-artifacts-${{ matrix.WslID }}
          path: ${{ env.artifactsPath }}
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: ${{ env.goversion }}
      - name: Prepare project metadata, assets and download rootfses
        shell: bash
        run: |
          set -eu
          # Download rootfses, checksum and place them at the correct place
          # TODO: what if we changed only assets?
          # if not upload:
          # build-id is 9999
          cd wsl-builder/prepare-build
          go build .
          cd ../../
          archsBundle="$(./wsl-builder/prepare-build/prepare-build prepare ${{ env.artifactsPath }} ${{ matrix.WslID }} ${{ matrix.Rootfses }} --no-checksum)"
          echo "AppxBundlePlatforms=${archsBundle}" >> $GITHUB_ENV

          # Prepare remaining env variables for msbuild
          buildMode="SideloadOnly"
          if [ ${{ matrix.Upload }} = "yes" ]; then
            buildMode="StoreUpload"
          fi
          echo "UapAppxPackageBuildMode=${buildMode}" >> $GITHUB_ENV
      - name: Setup MSBuild (PATH)
        uses: microsoft/setup-msbuild@v1.0.2
      - name: Install certificate
        shell: powershell
        run: |
          New-Item -ItemType directory -Path certificate
          Set-Content -Path certificate\certificate.txt -Value '${{ secrets.CERTIFICATE }}'
          certutil -decode certificate\certificate.txt certificate\certificate.pfx

          $pwd = ConvertTo-SecureString  '${{ secrets.CERTIFICATE_PASSWORD }}' -AsPlainText -Force
          Import-PfxCertificate -Password $pwd -CertStoreLocation Cert:LocalMachine\Trust -FilePath certificate\certificate.pfx
          Import-PfxCertificate -Password $pwd -CertStoreLocation Cert:CurrentUser\My -FilePath certificate\certificate.pfx
      - name: Build Bundle
        run:  msbuild .\DistroLauncher.sln /t:Build /m /nr:false /p:Configuration=Release /p:AppxBundle=Always /p:AppxBundlePlatforms="${{ env.AppxBundlePlatforms }}" /p:UapAppxPackageBuildMode=${{ env.UapAppxPackageBuildMode }} -verbosity:normal
      - name: Print content
        shell: bash
        run: |
          find .
      - name: Allow downloading new appxbundle
        if: ${{ matrix.Upload != 'yes' }}
        uses: actions/upload-artifact@v2
        with:
          name: appxbundle
          path: ./AppPackages/**/*.appxbundle
          retention-days: 7
      - name: Check if we need to upload new build
        id: upload-build
        if: ${{ matrix.Upload == 'yes' }}
        shell:  bash
        run: |
          set -eu
          # Store md5sum of rootfs and launchers
          md5sum */install.tar.gz */Release/launcher.exe|sort >> ${{ env.artifactsPath }}-new/fingerprint

          echo "::set-output uploaded=false"
          hasChanges="$(diff -Nu ${{ env.artifactsPath }}/fingerprint ${{ env.artifactsPath }}-new/fingerprint)"
          if [ -z "${hasChanges}" ]; then
            exit 0
          fi

          echo "Uploading new version: some files have changed:"
          echo "${hasChanges}"

          # TODO: upload to the store

          echo "::set-output uploaded=true"

          rm -r ${{ env.artifactsPath }}
          mv ${{ env.artifactsPath }}-new ${{ env.artifactsPath }}
      - name: Upload build artefacts
        if: ${{ steps.upload-build.uploaded == 'true' }}
        uses: actions/upload-artifact@v2
        with:
          name: build-artifacts-${{ matrix.WslID }}
          path: ${{ env.artifactsPath }}-new
