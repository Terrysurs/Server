name: End-to-End Tests
on:
  workflow_dispatch:
  pull_request:
    paths-ignore:
      - docs/**
concurrency: azure-vm

env:
  az_name: wsl-ci
  az_resource_group: wsl

jobs:
  vm-setup:
    runs-on: ubuntu-latest
    steps:
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_VM_CREDS }}
      - name: Start the Runner
        shell: bash
        run: |
          az vm start --name ${{ env.az_name }} --resource-group ${{ env.az_resource_group }}

  end-to-end-tests:
    runs-on: self-hosted
    needs: vm-setup
    env:
      distroName: 'UbuntuDev.WslID.Dev'
      appID: 'UbuntuDev.FullName.Dev'
      launcher: 'ubuntudev.launchername.dev.exe'
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'
      - name: Install certificate
        shell: powershell
        run: |
          New-Item -ItemType directory -Path certificate
          Set-Content -Path certificate\certificate.txt -Value '${{ secrets.CERTIFICATE }}'
          certutil -decode certificate\certificate.txt certificate\certificate.pfx

          $pwd = ConvertTo-SecureString  '${{ secrets.CERTIFICATE_PASSWORD }}' -AsPlainText -Force
          Import-PfxCertificate -Password $pwd -CertStoreLocation Cert:LocalMachine\Trust -FilePath certificate\certificate.pfx
          Import-PfxCertificate -Password $pwd -CertStoreLocation Cert:CurrentUser\My -FilePath certificate\certificate.pfx
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version-file: ./e2e/go.work
      - name: Install or update WSL
        uses: ./.github/actions/wsl-install
      - name: Clearing leftovers from previous runs
        shell: powershell
        run: |
          $package=$(Get-AppxPackage | Where-Object PackageFullName -like *${{ env.appID }}*)
          If ( $package -ne $null -And $package -ne '' ) {
            Remove-AppxPackage $package
          }
      - uses: actions/download-artifact@v4
        with:
          name: sideload-build
      - name: Install the dev sideload build
        shell: powershell
        run: |
          # Install the appx
          $SideloadDir = $(Get-ChildItem -Directory .\Ubuntu_*_Test\ | Sort-Object -Property {$_.LastWriteTime} -Descending)[0].FullName
          # Patching the Add-DevPackage.ps1 script generated by MSBuild to avoid putting the VM into Developer Mode.
          $Script="$SideloadDir/Add-AppDevPackage.ps1"
          $NewContent= (Get-Content "$Script" -Raw) -Replace "(?sm)function CheckIfNeedDeveloperLicense.*?^}", "function CheckIfNeedDeveloperLicense { return `$false }"
          Set-Content -Path "$Script" -Value $NewContent
          Invoke-Expression "$SideloadDir/Install.ps1 -Force"

      - name: Run tests
        shell: powershell
        run: |
          Write-Output "::group::Environment setup"
          $env:LAUNCHER_REPO_ROOT=$PWD
          $env:WSL_UTF8 = 1

          # Shutting down WSL. This is sometimes necessary as it prevents "Access is denied" later.
          wsl.exe --shutdown
          wsl.exe --version
          wsl.exe --unregister '${{ env.distroName }}' 2>&1 | Out-Null

          cd e2e
          Write-Output "::endgroup::"

          Write-Output "::group::Tests"
          go test .\launchertester\ -timeout 15m -run TestBasicSetup --distro-name '${{ env.distroName }}' --launcher-name '${{ env.launcher }}'
          $exitStatus=$?
          Write-Output "::endgroup::"
          if ( ! $exitStatus ) { Exit(1) }

      - name: Remove the installed package
        if: always()
        shell: powershell
        run: |
          Remove-AppxPackage "$(Get-AppxPackage | Where-Object PackageFullName -like *${{ env.appID }}*)"

  stop-vm:
    runs-on: ubuntu-latest
    needs: [vm-setup, end-to-end-tests]
    if: always()
    steps:
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_VM_CREDS }}
      - name: Deallocate the Runner
        shell: bash
        run: |
          az vm deallocate --name ${{ env.az_name }} --resource-group ${{ env.az_resource_group }}
