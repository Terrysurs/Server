name: End-to-End Tests
on:
  workflow_dispatch:
  pull_request:
concurrency: azure-vm

jobs:
  start-vm:
    strategy:
      max-parallel: 1
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Start Azure VM
        uses: ./.github/actions/setup_vm/
        with:
          az_name: wsl-ci
          az_resource_group: wsl
          az_creds: ${{ secrets.AZURE_VM_CREDS }}
  
  remote-desktop:
    strategy:
      max-parallel: 1
    needs: start-vm
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Connect via RDP
        uses: ./.github/actions/rdp/
        with:
          az_vm_hostname: ${{ secrets.AZURE_VM_AUTHORITY }}
          az_vm_username: ${{ secrets.AZURE_VM_UN }}
          az_vm_password: ${{ secrets.AZURE_VM_UP }}

  end-to-end-tests:
    strategy:
      max-parallel: 1
    needs: start-vm
    runs-on: self-hosted
    env:
      rootfs64: 'http://cloud-images.ubuntu.com/wsl/lunar/current/ubuntu-lunar-wsl-amd64-wsl.rootfs.tar.gz'
      distroName: "Ubuntu-Preview"
      appID: "UbuntuPreview"
      launcher: "ubuntupreview.exe"
      goversion: "1.18"
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up MSBuild (PATH)
        uses: microsoft/setup-msbuild@v1.0.2
      - name: Install certificate
        shell: powershell
        run: |
          New-Item -ItemType directory -Path certificate
          Set-Content -Path certificate\certificate.txt -Value '${{ secrets.CERTIFICATE }}'
          certutil -decode certificate\certificate.txt certificate\certificate.pfx

          $pwd = ConvertTo-SecureString  '${{ secrets.CERTIFICATE_PASSWORD }}' -AsPlainText -Force
          Import-PfxCertificate -Password $pwd -CertStoreLocation Cert:LocalMachine\Trust -FilePath certificate\certificate.pfx
          Import-PfxCertificate -Password $pwd -CertStoreLocation Cert:CurrentUser\My -FilePath certificate\certificate.pfx
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.goversion }}
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
      - name: Build and install the appxbundle for testing
        shell: powershell
        run: |
          Write-Output "::group::Clearing leftovers from previous runs"
          $package=$(Get-AppxPackage | Where-Object PackageFullName -like *${{ env.appID }}*)
          If ( $package -ne $null -And $package -ne '' ) {
            Remove-AppxPackage $package
          }
          Write-Output "::endgroup::"

          Write-Output "::group::Building and installing appbundle"
          .\e2e\pre-e2e-testing.ps1 -AppID ${{ env.appID }} -RootfsX64 ${{ env.rootfs64 }}
          Write-Output "::endgroup::"
      - name: Run tests
        uses: ./.github/actions/wsl_enabled_powershell/
        with:
          exec: |
            Write-Output "::group::Environment setup"
            $env:WSL_UTF8=1
            $env:LAUNCHER_REPO_ROOT=$PWD
            wsl.exe --version
            wsl --unregister ${{ env.distroName }} 2>&1 | Out-Null
            cd .\e2e
            Write-Output "::endgroup::"

            Write-Output "::group::Tests"
            go test .\launchertester\ -timeout 15m -run TestBasicSetup --distro-name ${{ env.distroName }} --launcher-name ${{ env.launcher }}
            $r=$LastExitCode
            Write-Output "::endgroup::"
            
            exit $r
      - name: Remove the installed package
        if: always()
        shell: powershell
        run: |
          Remove-AppxPackage "$(Get-AppxPackage | Where-Object PackageFullName -like *${{ env.appID }}*)"

  stop-vm:
    strategy:
      max-parallel: 1
    runs-on: ubuntu-latest
    needs: end-to-end-tests
    if: always()
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Stop Azure VM
        uses: ./.github/actions/stop_vm/
        with:
          az_name: wsl-ci
          az_resource_group: wsl
          az_creds: ${{ secrets.AZURE_VM_CREDS }}
