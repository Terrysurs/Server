name: Execute bash scripts in WSL

concurrency: azure-vm

on:
  workflow_call:
    secrets:
      az_creds:
        description: Credentials to use for Azure
        required: true
      az_vm_hostname:
        description: Hostname for "xfreerdp /v:az_vm_hostname"
        required: true
      az_vm_username:
        description: Username for "xfreerdp /u:az_vm_username"
        required: true
      az_vm_password:
        description: Password for "xfreerdp /p:az_vm_password"
        required: true
    inputs:
      exec:
        description: Script to run on WSL
        required: true
        type: string
      az_resource_group:
        description: Name of the Azure resource group to run on
        required: true
        type: string
      az_name:
        description: Name of the Azure VM to run on
        required: true
        type: string

jobs:
  start-vm:
    strategy:
      max-parallel: 1
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Start Azure VM
        uses: ./.github/actions/setup_vm/
        with:
          az_name: ${{ inputs.az_name }}
          az_resource_group: ${{ inputs.az_resource_group }}
          az_creds: ${{ secrets.az_creds }}

  remote-desktop:
    strategy:
      max-parallel: 1
    needs: start-vm
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Connect via RDP
        uses: ./.github/actions/rdp/
        with:
          az_vm_hostname: ${{ secrets.az_vm_hostname }}
          az_vm_username: ${{ secrets.az_vm_username }}
          az_vm_password: ${{ secrets.az_vm_password }}

  wsl-setup-and-script-execution:
    strategy:
      max-parallel: 1
    needs: start-vm
    runs-on: self-hosted
    env:
      LAUNCHER: ubuntupreview.exe
      DISTRO: Ubuntu-Preview
      STORENAME: Ubuntu (Preview)
      APPX: UbuntuPreview
      TMPDIR: /tmp/github_${{ github.run_id }}_${{ github.run_attempt }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install WSL
        uses: ./.github/actions/wsl_enabled_powershell/
        with:
          exec: |
            Write-Output '::group::WSL install'
            # Install or update WSL
            winget install --name 'Windows Subsystem for Linux' --accept-source-agreements --accept-package-agreements --silent

            # Install or update Appx
            winget install --name '${{ env.STORENAME }}'  --accept-source-agreements  --accept-package-agreements --silent
            Write-Output '::endgroup::'

            Write-Output '::group::WSL setup'
            # Unregister any pre-exising distro
            $env:WSL_UTF8=1
            wsl.exe --unregister ${{ env.DISTRO }} 2>&1 | Out-Null

            # Register a new instance
            ${{ env.launcher }} install --root --ui=none

            # Testing succesful install
            ${{ env.launcher }} run exit 0
            $exit=$LASTEXITCODE

            Write-Output '::endgroup::'
            Exit($exit)
      - name: Clone repo
        uses: ./.github/actions/wsl_enabled_powershell/
        with:
          max-attempts: 5
          exec: |
            Write-Output '::group::Repo cloning and setup'
            # Clone repo
            $env:WSL_UTF8=1

            wsl.exe -d ${{ env.DISTRO }} --cd "~" -- bash -ec @'
            git clone https://github.com/${{ github.repository }}.git action_workspace
            cd action_workspace
            git fetch --no-tags --prune --progress origin +${{ github.sha }}:${{ github.ref }}
            git checkout ${{ github.sha }}
            '@
            $exit=$LASTEXITCODE
            Write-Output "Exiting with exit code ${exit}"
            Write-Output '::endgroup::'
            Exit($exit)
      - name: Copy script into WSL
        shell: powershell
        env:
          exec: ${{ inputs.exec }}
        run: |
          Write-Output '::group::Storage of script into WSL'
          $dirWindows="\\wsl.localhost\${{ env.DISTRO }}${{ env.TMPDIR }}"

          New-Item -Force -Path "${dirWindows}\script.sh" -ItemType File | Out-Null

          # The following function is used because:
          # - It does not write the BOM (0xff 0xfe at file start)
          # - It does not write \r at line ends
          [IO.File]::WriteAllText( "${dirWindows}\script.sh" , "${env:exec}")
          $exit=$LASTEXITCODE

          Write-Output '::endgroup::'
          Exit($exit)
      - name: Run script
        uses: ./.github/actions/wsl_enabled_powershell/
        with:
          max-attempts: 5
          exec: |
            $env:WSL_UTF8=1
            # Redirecting to stdout to prevent PsExec from showing stderr as an exception
            wsl.exe -d ${{ env.DISTRO }} --cd '~/action_workspace' -- bash -c "bash ${{ env.TMPDIR }}/script.sh 2>&1"
            Exit($LASTEXITCODE)
      - name: Cleanup
        uses: ./.github/actions/wsl_enabled_powershell/
        if: always()
        with:
          max-attempts: 5
          exec: |
            $env:WSL_UTF8=1
            wsl.exe --unregister ${{ env.DISTRO }}
            Remove-AppxPackage "$(Get-AppxPackage | Where-Object PackageFullName -like '*${{ env.APPX }}*')"

  stop-vm:
    strategy:
      max-parallel: 1
    runs-on: ubuntu-latest
    needs: wsl-setup-and-script-execution
    if: always()
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Stop Azure VM
        uses: ./.github/actions/stop_vm/
        with:
          az_name: ${{ inputs.az_name }}
          az_resource_group: ${{ inputs.az_resource_group }}
          az_creds: ${{ secrets.az_creds }}
