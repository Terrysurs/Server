# /usr/bin/python
""" Aggregates comments generated by clang-format and clang-tidy runners
(if the runner is enabled in the command line) and
 post a pull request review with them """
#
# Copyright (C) 2021 Canonical Ltd
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 3 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Source code adapted from https://github.com/platisd/clang-tidy-pr-comments.


import os
import sys
import argparse

from clang_lint.clang_lint import custom_clang_format_commenter as clang_format
from clang_lint.clang_lint import custom_clang_tidy_commenter as clang_tidy
from clang_lint.inline_comments import post_pr_review_comments as post_pr


def main():
    parser = argparse.ArgumentParser(
        prog="clang_lint",
        description="Linting with Clang Tools action runner"
    )
    parser.add_argument(
        "--repository-name",
        type=str,
        required=True,
        help="The name by which GitHub knows this repository",
    )
    parser.add_argument(
        "--repository-root",
        type=str,
        required=True,
        help="The path to the root of the git repository",
    )
    parser.add_argument(
        "--pull-request-id",
        type=int,
        required=True,
        help="The pull request number.",
    )
    parser.add_argument(
        "--run-clang-format",
        action='store_true',
        help="Adds clang-format to the pipeline. You should",
    )
    parser.add_argument(
        "--run-clang-tidy",
        action='store_true',
        help="Adds clang-tidy to the pipeline. You should",
    )
    parser.add_argument(
        "--build-dir",
        type=str,
        default="build",
        required=False,
        help="The build path relative to the repository root. Defaults to"
             " 'build', common on CMake projects.",
    )
    parser.add_argument(
        "--fallback-style",
        type=str,
        default="Webkit",
        required=False,
        help="The fallback style to complement .clang-format file.",
    )
    parser.add_argument(
        "--comment-only",
        required=False,
        default=False,
        action='store_true',
        help="If set the review will show as comments only, without "
             "requesting changes to the PR author.",
    )
    parser.add_argument(
        "--dry-run",
        required=False,
        default=False,
        action='store_true',
        help="Avoid post. For testing only.",
    )
    args = parser.parse_args()

    root = args.repository_root
    root = os.path.normpath(root)
    review_event = (
        "COMMENT"
        if args.comment_only == "true"
        else "REQUEST_CHANGES"
    )
    pr_id = args.pull_request_id

    # The pipeline:
    body = ""
    comments = []
    if args.run_clang_format:
        cf_review_comments = clang_format.review_comments(root, pr_id,
                                                          review_event,
                                                          "Webkit")
        if cf_review_comments is None:
            print("Formatting is fine. No comments from clang-format.")
        else:
            body += cf_review_comments["body"]
            comments += cf_review_comments["comments"]

    if args.run_clang_tidy:
        fixes_file = os.path.join(root, "DistroLauncher", "fixes.yaml")
        ct_review_comments = clang_tidy.review_comments(root, pr_id,
                                                        fixes_file)

        if ct_review_comments is None:
            print("No comments from clang-tidy.")
        else:
            body += "\n" + ct_review_comments["body"]
            comments += ct_review_comments["comments"]

    if len(body) == 0 and len(comments) == 0:
        print("Everything is fine. Nothing to do.")
        return 0

    # Posting the comments to GitHub
    pr_review = {
        "body": body,
        "event": review_event,
        "comments": comments,
    }
    repo = args.repository_name
    pr_id = args.pull_request_id

    # For local testing
    if args.dry_run:
        print(" =========== Debug Print: Would post the following: ===")
        print("Repository name: {}".format(repo))
        print("Pull Request: {}".format(pr_id))
        print(" -------- Comments -----------")
        print(pr_review["body"])
        print(pr_review["comments"])
        return 0

    return post_pr.post_pr_review_comments(repo, pr_id, pr_review)


if __name__ == '__main__':
    sys.exit(main())
