name: Azure WSL script runner
description: 'Runs scripts on WSL in Azure machines.'

inputs:
  az_vm_hostname:
    description: Hostname for "xfreerdp /v:az_vm_hostname"
    required: true
  az_vm_username:
    description: Username for "xfreerdp /u:az_vm_username"
    required: true
  az_vm_password:
    description: Password for "xfreerdp /p:az_vm_password"
    required: true
  exec:
    description: Script to run on WSL
    required: true
  distro_launcher:
    description: |
      Launcher executable. 
      Don't override unless you have a good reason to
    required: false
    default: ubuntupreview.exe
  distro_name:
    description: |
      Distro name as shown in 'wsl -l -v'. 
      Don't override unless you have a good reason to
    required: false
    default: Ubuntu-Preview
  distro_store_name:
    description: |
      Name of distro in the Windows Store. 
      Don't override unless you have a good reason to
    required: false
    default: Ubuntu (Preview)
  distro_appx_name:
    description: |
      Name of distro App package. 
      Don't override unless you have a good reason to
    required: false
    default: UbuntuPreview

runs:
  using: 'composite'
  steps:
    - name: Install or update WSL
      uses: ./.github/actions/install-wsl
      with:
        distro_name: ${{ inputs.distro_name }}
        distro_launcher: ${{ inputs.distro_launcher }}
        distro_store_name: ${{ inputs.distro_store_name }}

    - name: Clone repo
      uses: ./.github/actions/wsl_enabled_powershell
      with:
        max-attempts: 5
        exec: |
          Write-Output '::group::Repo cloning and setup'
          # Clone repo
          $env:WSL_UTF8=1

          wsl.exe -d ${{ inputs.distro_name }} --cd "~" -- bash -ec @'
          git clone https://github.com/${{ github.repository }}.git action_workspace
          cd action_workspace
          git fetch --no-tags --prune --progress origin +${{ github.sha }}:${{ github.ref }}
          git checkout ${{ github.sha }}
          '@
          $exit=$LASTEXITCODE
          Write-Output "Exiting with exit code ${exit}"
          Write-Output '::endgroup::'
          Exit($exit)

    - name: Copy script into WSL
      shell: powershell
      env:
        exec: ${{ inputs.exec }}
      run: |
        Write-Output '::group::Storage of script into WSL'
        $tmpDir="/tmp/github_${{github.run_number}}_${{github.run_attempt}}"
        $dirWindows="\\wsl.localhost\${{ inputs.distro_name }}${tmpDir}"

        New-Item -Force -Path "${dirWindows}\script.sh" -ItemType File | Out-Null

        # The following function is used because:
        # - It does not write the BOM (0xff 0xfe at file start)
        # - It does not write \r at line ends
        [IO.File]::WriteAllText( "${dirWindows}\script.sh" , "${env:exec}")
        $exit=$LASTEXITCODE

        Write-Output '::endgroup::'
        Exit($exit)  

    - name: Run linux script
      uses: ./.github/actions/wsl_enabled_powershell
      with:
        max-attempts: 5
        exec: |
          $env:WSL_UTF8=1
          # Redirecting to stdout to prevent PsExec from showing stderr as an exception
          $tmpDir="/tmp/github_${{github.run_number}}_${{github.run_attempt}}"
          wsl.exe -d ${{ inputs.distro_name }} --cd '~/action_workspace' -- bash -c "bash ${tmpDir}/script.sh 2>&1"
          Exit($LASTEXITCODE)

    - name: Cleanup
      uses: ./.github/actions/wsl_enabled_powershell
      if: always()
      with:
        max-attempts: 5
        exec: |
          $env:WSL_UTF8=1
          wsl.exe --unregister ${{ inputs.distro_name }}
          Remove-AppxPackage "$(Get-AppxPackage | Where-Object PackageFullName -like '*${{ inputs.distro_appx_name }}*')"
